["PackageDef(Ident(continuations),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(ExampleObject,Ident(ExampleObject$),Apply(Select(New(Ident(ExampleObject$)),<init>),List())), TypeDef(ExampleObject$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(ExampleObject)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class continuations)),object ExampleObject)))))), DefDef(method1,List(List(ValDef(x,Ident(Int),EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Apply(Select(Ident(x),+),List(Literal(Constant(1))))), ValDef(z1,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Literal(Constant(1))), DefDef(method2,List(List(ValDef(x,Ident(Int),EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Apply(Select(Ident(x),+),List(Literal(Constant(1))))), ValDef(z2,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Literal(Constant(1))), DefDef(method3,List(List(ValDef(x,Ident(Int),EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Apply(Select(Ident(x),+),List(Literal(Constant(1))))), ValDef(z3,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Literal(Constant(1))), TypeDef(ExampleObject$continuations$1,Template(DefDef(<init>,List(List(ValDef($completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class ExampleObject$)),class ExampleObject$continuations$1)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class internal)),class ContinuationImpl)]),<init>),List(Ident($completion), Select(Ident($completion),context)))),ValDef(_,EmptyTree,EmptyTree),List(ValDef(I$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Ident(_)), DefDef(I$0_=,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), ValDef($result,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],Ident(_)), ValDef($label,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Ident(_)), DefDef($result_=,List(List(ValDef(x$0,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), DefDef($label_=,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), DefDef(invokeSuspend,List(List(ValDef(result,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],EmptyTree))),TypeTree[OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))],Block(List(Assign(Select(This(Ident(ExampleObject$continuations$1)),$result),Ident(result)), Assign(Select(This(Ident(ExampleObject$continuations$1)),$label),Apply(Select(Select(This(Ident(ExampleObject$continuations$1)),$label),|),List(Ident(MinValue))))),Apply(Ident(continuations),List(Literal(Constant(null)), This(Ident(ExampleObject$continuations$1)))))), DefDef(create,List(List(ValDef(value,TypeTree[OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))],EmptyTree), ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))))],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)))],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class internal)),class BaseContinuationImpl)]),<init>),List(Ident(completion)))), DefDef(invoke,List(List(ValDef(p1,TypeTree[OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))],EmptyTree), ValDef(p2,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))))],EmptyTree))),TypeTree[OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))],Apply(Select(TypeApply(Select(Apply(Select(This(Ident(ExampleObject$continuations$1)),create),List(Ident(p1), Ident(p2))),asInstanceOf),List(TypeTree[ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class internal)),class BaseContinuationImpl))])),invokeSuspend),List(Apply(TypeApply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Right)]),<init>),List(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)], TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)])),List(Literal(Constant(())))))))))), DefDef(continuations,List(List(ValDef(x,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree), ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],EmptyTree))),TypeTree[OrType(OrType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))],Block(List(ValDef(x##1,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],Ident(x)), Block(List(ValDef($continuation,TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class ExampleObject$)),class ExampleObject$continuations$1)],Match(Ident(completion),List(CaseDef(Bind(x$0,Typed(Ident(x$0),TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class ExampleObject$)),class ExampleObject$continuations$1)])),Apply(Select(Apply(Select(Select(Ident(x$0),$label),&),List(Ident(MinValue))),!=),List(Literal(Constant(0)))),Block(List(Assign(Select(Ident(x$0),$label),Apply(Select(Select(Ident(x$0),$label),-),List(Ident(MinValue))))),Ident(x$0))), CaseDef(Ident(_),EmptyTree,Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class ExampleObject$)),class ExampleObject$continuations$1)]),<init>),List(Ident(completion))))))), ValDef($result,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],Select(Ident($continuation),$result))),Match(Select(Ident($continuation),$label),List(CaseDef(Literal(Constant(0)),EmptyTree,Block(List(Apply(Select(Ident(Continuation),checkResult),List(Ident($result))), Assign(Select(Ident($continuation),I$0),Ident(x##1)), Assign(Select(Ident($continuation),$label),Literal(Constant(1))), ValDef(safeContinuation,TypeTree[AppliedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object continuations),class SafeContinuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],Apply(TypeApply(Select(Ident(SafeContinuation),init),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)])),List(Ident($continuation)))), Block(List(),Block(List(),Apply(Select(Ident(safeContinuation),resume),List(Apply(Select(Apply(Select(Apply(Select(Apply(Select(Apply(Select(Apply(Select(Apply(Ident(method1),List(Ident(x##1))),+),List(Apply(Ident(method2),List(Ident(x##1))))),+),List(Apply(Ident(method3),List(Ident(x##1))))),+),List(Ident(z1))),+),List(Ident(z2))),+),List(Ident(z3))),+),List(Literal(Constant(1))))))))),Match(Apply(Select(Ident(safeContinuation),getOrThrow),List()),List(CaseDef(Select(Select(Ident(Continuation),State),Suspended),EmptyTree,Return(Select(Select(Ident(Continuation),State),Suspended),Ident(continuations))), CaseDef(Bind(orThrow,EmptyTree),EmptyTree,Literal(Constant(()))))))), CaseDef(Literal(Constant(1)),EmptyTree,Block(List(Assign(Ident(x##1),Select(Ident($continuation),I$0))),Apply(Select(Ident(Continuation),checkResult),List(Ident($result))))), CaseDef(Ident(_),EmptyTree,Apply(Ident(throw),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class IllegalArgumentException)]),<init>),List(Literal(Constant(call to 'resume' before 'invoke' with coroutine)))))))))), DefDef(method4,List(List(ValDef(x,Ident(Int),EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Apply(Select(Ident(x),+),List(Literal(Constant(1))))), ValDef(z4,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Literal(Constant(1)))),Apply(Select(Apply(Select(Apply(Select(Apply(Select(Apply(Select(Apply(Select(Apply(Select(Apply(Select(Literal(Constant(1)),+),List(Apply(Ident(method1),List(Ident(x##1))))),+),List(Apply(Ident(method2),List(Ident(x##1))))),+),List(Apply(Ident(method3),List(Ident(x##1))))),+),List(Apply(Ident(method4),List(Ident(x##1))))),+),List(Ident(z1))),+),List(Ident(z2))),+),List(Ident(z3))),+),List(Ident(z4)))))))), ValDef(compileFromString$package,Ident(compileFromString$package$),Apply(Select(New(Ident(compileFromString$package$)),<init>),List())), TypeDef(compileFromString$package$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromString$package)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class continuations)),object compileFromString$package)))))), DefDef(program,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(),Apply(Ident(println),List(Apply(Ident(continuations),List(Literal(Constant(1)), Ident(contImpl))))))))))))","package continuations {\n  import continuations.*\n  final lazy module val ExampleObject: continuations.ExampleObject = new continuations.ExampleObject()\n  @SourceFile(\"compileFromString.scala\") final module class ExampleObject() extends Object() { \n    this: continuations.ExampleObject.type =>\n    private def writeReplace(): AnyRef = new scala.runtime.ModuleSerializationProxy(classOf[continuations.ExampleObject.type])\n    private[this] def method1(x: Int): Int = x.+(1)\n    private[this] val z1: Int = 1\n    protected def method2(x: Int): Int = x.+(1)\n    protected val z2: Int = 1\n    def method3(x: Int): Int = x.+(1)\n    val z3: Int = 1\n    class ExampleObject$continuations$1($completion: continuations.Continuation[Any | Null]) extends continuations.jvm.internal.ContinuationImpl(\n      $completion\n    , $completion.context) {\n      var I$0: Any = _\n      def I$0_=(x$0: Any): Unit = ()\n      var $result: Either[Throwable, Any | Null | continuations.Continuation.State.Suspended.type] = _\n      var $label: Int = _\n      def $result_=(x$0: Either[Throwable, Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)]): Unit = ()\n      def $label_=(x$0: Int): Unit = ()\n      protected override def invokeSuspend(\n        result: Either[Throwable, Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)]\n      ): Any | Null = \n        {\n          this.$result = result\n          this.$label = this.$label.|(scala.Int.MinValue)\n          continuations.ExampleObject.continuations(null, this)\n        }\n      override def create(value: Any | Null, completion: continuations.Continuation[Any | Null]): continuations.Continuation[Unit] = \n        new continuations.jvm.internal.BaseContinuationImpl(completion)\n      protected def invoke(p1: Any | Null, p2: continuations.Continuation[Any | Null]): Any | Null = \n        this.create(p1, p2).asInstanceOf[(BaseContinuationImpl.this : continuations.jvm.internal.BaseContinuationImpl)].invokeSuspend(\n          new Right[Unit, Unit](())\n        )\n    }\n    def continuations(x: Int, completion: continuations.Continuation[Int]): \n      Int | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)\n     = \n      {\n        var x##1: Int = x\n        {\n          val $continuation: continuations.ExampleObject.ExampleObject$continuations$1 = \n            completion match \n              {\n                case x$0 @ x$0:continuations.ExampleObject.ExampleObject$continuations$1 if x$0.$label.&(scala.Int.MinValue).!=(0) => \n                  x$0.$label = x$0.$label.-(scala.Int.MinValue)\n                  x$0\n                case _ => new continuations.ExampleObject.ExampleObject$continuations$1(completion)\n              }\n          val $result: Either[Throwable, Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)] = \n            $continuation.$result\n          $continuation.$label match \n            {\n              case 0 => \n                continuations.Continuation.checkResult($result)\n                $continuation.I$0 = x##1\n                $continuation.$label = 1\n                val safeContinuation: continuations.SafeContinuation[Int] = continuations.SafeContinuation.init[Int]($continuation)\n                {\n                  {\n                    safeContinuation.resume(method1(x##1).+(method2(x##1)).+(method3(x##1)).+(z1).+(z2).+(z3).+(1))\n                  }\n                }\n                safeContinuation.getOrThrow() match \n                  {\n                    case continuations.Continuation.State.Suspended => return continuations.Continuation.State.Suspended\n                    case orThrow @ <empty> => ()\n                  }\n              case 1 => \n                x##1 = $continuation.I$0\n                continuations.Continuation.checkResult($result)\n              case _ => throw new IllegalArgumentException(\"call to \\'resume\\' before \\'invoke\\' with coroutine\")\n            }\n        }\n        def method4(x: Int): Int = x.+(1)\n        val z4: Int = 1\n        1.+(continuations.ExampleObject.method1(x##1)).+(continuations.ExampleObject.method2(x##1)).+(continuations.ExampleObject.method3(x##1)).+(\n          method4(x##1)\n        ).+(continuations.ExampleObject.z1).+(continuations.ExampleObject.z2).+(continuations.ExampleObject.z3).+(z4)\n      }\n  }\n  final lazy module val compileFromString$package: \n    continuations.compileFromString$package\n   = new continuations.compileFromString$package()\n  @SourceFile(\"compileFromString.scala\") final module class \n    compileFromString$package\n  () extends Object() { this: continuations.compileFromString$package.type =>\n    private def writeReplace(): AnyRef = \n      new scala.runtime.ModuleSerializationProxy(classOf[continuations.compileFromString$package.type])\n    def program: Unit = \n      {\n        println(continuations.ExampleObject.continuations(1, continuations.jvm.internal.ContinuationStub.contImpl))\n      }\n  }\n}"]